---
layout: post
title: Unwinding... with MongoDB
---

I finally had the time to read up a bit more on MongoDB and integrate it into my final project from DBC, <a href="http://smartipantsgame.com">SmartiPants</a>.

The data structure of our project was tailor made for Mongo DB.  We were essentially using one JSON object that was being passed around to the different parts of our app in order to be used in different ways.  This structure wasn't accidental, we spent a decent amount of time figuring our to simplify communication between the pieces of our application and I wanted to implement a database that took advantage of that simplicity.

The single JSON object representing a game, was generated on the back-end from attributes stored in the database, then passed to the front-end to be updated with evaluations of user responses then sent back to the db to be saved.  This is where the object lost it's simplicity.  When saving to the DB we broke the object into different tables so that it would be easier to run statistical queries on in the future. Reconstructing games from our DB now required a parser to transform the data into that stats and graph brains could use.  If we were willing to forgo the need to run complex queries and generate stats, we would have just saved completed games as a JSON string.

After implementing MongoDB and MongoID (an Object Document Wrapper for MongoDB), all of the following code, required to save and pull deconstructed JSON data from our relational database....

<pre><code class='ruby'> 
class GameBuilder
  def initialize(user_id, params)
    @params = params
    @user_id = user_id
  end

  def create_game
    game = build_game(@user_id, @params[:n], @params)
    build_rounds(@params[:rounds]).each do |round|
      game.rounds << round
    end
    game.save
  end

  private

  def build_game(user_id, n, game_hash)
    Game.new(user_id: @user_id, n: n, json_string: game_hash.to_s)
  end

  def build_rounds(rounds_arr)
    new_rounds = []
    rounds_arr.each do |round|
      new_rounds << build_round(round)
    end
    new_rounds
  end

  def build_round(round)
    Round.new(round_number: round[:roundNumber],
              color_id: round[:colorId],
              audio_id: round[:soundId],
              position: round[:position],
              color_correct: round[:colorGuess],
              audio_correct: round[:soundGuess],
              position_correct: round[:positionGuess])
  end
end  
</code></pre>

<pre><code class='ruby'>
class JSONFormatter
  def initialize(klass,property)
    @klass = klass
    @property = property
  end

  def format
    hash_of_property_values = Hash.new

    pull_values(@klass, @property).each_with_index do |property_value, index|
      hash_of_property_values[index + 1] = property_value
    end
    hash_of_property_values
  end

  private

  def pull_values(klass, property)
    klass.all.map{|instance| instance.send(property) }
  end
end
</code></pre><br>

was replaced with a query like this:

<pre><code class='ruby'>
Game.collection.aggregate(
        {
          "$match" => { "_id" => @last_game_id } 
        },
          
        { 
          "$unwind" => "$rounds"
        },

        { 
          "$match" => { 'rounds.positionGuess' => true }
        },

        {
          "$project" => { 'rounds.' + "#attribute" => 1, '_id' => 0 }
        }
      ).map! { |round| round = round[:rounds][attribute.to_sym] }
</code></pre><br>

Not to mention, we were able to collapse all of the SQL tables into one object.  Im still working out when the best time to use a NoSQL DB is and how to maximize its strengths but this seems like a pretty clear cut use case for preserving our apps data structure.